{"version":3,"sources":["Card.js","Cardlist.js","SearchBox.js","scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robot","map","user","i","Key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAeeA,EAbH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACrB,OACI,yBAAKC,UAAU,+CACX,yBAAKC,IAAK,SAAQC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BACGC,MCYJK,EAjBC,SAAC,GAAW,IAAVC,EAAS,EAATA,MACd,OACI,6BAEAA,EAAMC,KAAI,SAACC,EAAKC,GACpB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLR,GAAIK,EAAMG,GAAGR,GACZF,KAAMO,EAAMG,GAAGV,KACfC,MAAOM,EAAMG,GAAGT,aCDNW,EAVE,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC3B,OAAO,yBAAKX,UAAU,OACtB,2BACAA,UAAU,mCACVY,KAAK,SAASC,YAAY,gBAC1BC,SAAUH,MCECI,EARD,SAACC,GACX,OAAQ,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAkBC,OAAO,UACpEJ,EAAMK,WCqCCC,E,kDAlCX,aAAc,IAAD,8BACT,gBAcJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAM,CACPxB,MAAO,GACPM,YAAY,IAJP,E,gEAOO,IAAD,OACfmB,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACrB,MAAO6B,S,+BAOrB,IAAD,OACCC,EAAiBC,KAAKP,MAAMxB,MAAMgC,QAAO,SAAAhC,GAC3C,OAAOA,EAAMP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAGvE,OACI,yBAAKrC,UAAW,MACjB,6CACA,kBAAC,EAAD,CAAYW,aAAcwB,KAAKZ,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,MAAO8B,U,GA9BNK,aCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAEdC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1eb66c8b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card= ({name,email,id}) =>{\r\n    return(\r\n        <div className='bg-light-blue dib br3 ma3 grow bw2 shadow-5'>\r\n            <img alt ='robots'src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h1>{name}</h1>\r\n                <p>\r\n                  {email}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import robot from './robot';\r\n\r\nconst Cardlist =({robot})=>{\r\n    return(\r\n        <div>\r\n          {\r\n        robot.map((user,i)=>{\r\n    return (<Card \r\n    Key={i} \r\n    id={robot[i].id}\r\n     name={robot[i].name} \r\n     email={robot[i].email}/>\r\n  );\r\n        })\r\n      }\r\n      </div>\r\n\r\n    );\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield,searchChange})=>{\r\n    return(<div className='pa2'>\r\n    <input \r\n    className='pa3 ba b--green bg-lightest-blue' \r\n    type='search' placeholder='search robots'\r\n    onChange={searchChange}/>\r\n    </div>\r\n    );\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll =(props)=>{\r\n    return (<div style={{overflowY: 'scroll',border:'5px solid black',height:'500px'}}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n    \r\n\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './scroll';\r\n\r\n class App extends Component {\r\n     constructor(){\r\n         super()\r\n         this.state={\r\n             robot: [],\r\n             searchfield:''\r\n         }\r\n     }\r\n     componentDidMount(){\r\n         fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n             return response.json();\r\n         })\r\n         .then(users=>{\r\n             this.setState({robot: users})\r\n         });\r\n     }\r\n     onSearchChange=(event)=>{\r\n         this.setState({searchfield: event.target.value})\r\n         \r\n     }\r\n     render(){\r\n        const filteredRobots = this.state.robot.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n    \r\n     return(\r\n         <div className= 'tc'>\r\n        <h1>Robot friends</h1>\r\n        <SearchBox  searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n        <Cardlist robot={filteredRobots}/>\r\n        </Scroll>\r\n     </div>);\r\n     }\r\n }\r\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App  from'./App';\n//import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\n\nReactDOM.render(<App/>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}